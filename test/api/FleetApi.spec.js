/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpaceTradersApi);
  }
}(this, function(expect, SpaceTradersApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpaceTradersApi.FleetApi();
  });

  describe('(package)', function() {
    describe('FleetApi', function() {
      describe('createChart', function() {
        it('should call createChart successfully', function(done) {
          // TODO: uncomment createChart call and complete the assertions
          /*

          instance.createChart(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createShipShipScan', function() {
        it('should call createShipShipScan successfully', function(done) {
          // TODO: uncomment createShipShipScan call and complete the assertions
          /*

          instance.createShipShipScan(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createShipSystemScan', function() {
        it('should call createShipSystemScan successfully', function(done) {
          // TODO: uncomment createShipSystemScan call and complete the assertions
          /*

          instance.createShipSystemScan(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createShipWaypointScan', function() {
        it('should call createShipWaypointScan successfully', function(done) {
          // TODO: uncomment createShipWaypointScan call and complete the assertions
          /*

          instance.createShipWaypointScan(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createSurvey', function() {
        it('should call createSurvey successfully', function(done) {
          // TODO: uncomment createSurvey call and complete the assertions
          /*

          instance.createSurvey(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dockShip', function() {
        it('should call dockShip successfully', function(done) {
          // TODO: uncomment dockShip call and complete the assertions
          /*

          instance.dockShip(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('extractResources', function() {
        it('should call extractResources successfully', function(done) {
          // TODO: uncomment, update parameter values for extractResources call and complete the assertions
          /*
          var opts = {};

          instance.extractResources(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('extractResourcesWithSurvey', function() {
        it('should call extractResourcesWithSurvey successfully', function(done) {
          // TODO: uncomment extractResourcesWithSurvey call and complete the assertions
          /*

          instance.extractResourcesWithSurvey(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMounts', function() {
        it('should call getMounts successfully', function(done) {
          // TODO: uncomment getMounts call and complete the assertions
          /*

          instance.getMounts(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMyShip', function() {
        it('should call getMyShip successfully', function(done) {
          // TODO: uncomment getMyShip call and complete the assertions
          /*

          instance.getMyShip(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMyShipCargo', function() {
        it('should call getMyShipCargo successfully', function(done) {
          // TODO: uncomment getMyShipCargo call and complete the assertions
          /*

          instance.getMyShipCargo(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMyShips', function() {
        it('should call getMyShips successfully', function(done) {
          // TODO: uncomment, update parameter values for getMyShips call and complete the assertions
          /*
          var opts = {};

          instance.getMyShips(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipCooldown', function() {
        it('should call getShipCooldown successfully', function(done) {
          // TODO: uncomment getShipCooldown call and complete the assertions
          /*

          instance.getShipCooldown(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipNav', function() {
        it('should call getShipNav successfully', function(done) {
          // TODO: uncomment getShipNav call and complete the assertions
          /*

          instance.getShipNav(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('installMount', function() {
        it('should call installMount successfully', function(done) {
          // TODO: uncomment, update parameter values for installMount call and complete the assertions
          /*
          var opts = {};

          instance.installMount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('jettison', function() {
        it('should call jettison successfully', function(done) {
          // TODO: uncomment, update parameter values for jettison call and complete the assertions
          /*
          var opts = {};

          instance.jettison(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('jumpShip', function() {
        it('should call jumpShip successfully', function(done) {
          // TODO: uncomment, update parameter values for jumpShip call and complete the assertions
          /*
          var opts = {};

          instance.jumpShip(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('navigateShip', function() {
        it('should call navigateShip successfully', function(done) {
          // TODO: uncomment, update parameter values for navigateShip call and complete the assertions
          /*
          var opts = {};

          instance.navigateShip(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('negotiateContract', function() {
        it('should call negotiateContract successfully', function(done) {
          // TODO: uncomment negotiateContract call and complete the assertions
          /*

          instance.negotiateContract(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orbitShip', function() {
        it('should call orbitShip successfully', function(done) {
          // TODO: uncomment orbitShip call and complete the assertions
          /*

          instance.orbitShip(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchShipNav', function() {
        it('should call patchShipNav successfully', function(done) {
          // TODO: uncomment, update parameter values for patchShipNav call and complete the assertions
          /*
          var opts = {};

          instance.patchShipNav(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseCargo', function() {
        it('should call purchaseCargo successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseCargo call and complete the assertions
          /*
          var opts = {};

          instance.purchaseCargo(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseShip', function() {
        it('should call purchaseShip successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseShip call and complete the assertions
          /*
          var opts = {};

          instance.purchaseShip(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('refuelShip', function() {
        it('should call refuelShip successfully', function(done) {
          // TODO: uncomment, update parameter values for refuelShip call and complete the assertions
          /*
          var opts = {};

          instance.refuelShip(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeMount', function() {
        it('should call removeMount successfully', function(done) {
          // TODO: uncomment, update parameter values for removeMount call and complete the assertions
          /*
          var opts = {};

          instance.removeMount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sellCargo', function() {
        it('should call sellCargo successfully', function(done) {
          // TODO: uncomment, update parameter values for sellCargo call and complete the assertions
          /*
          var opts = {};

          instance.sellCargo(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('shipRefine', function() {
        it('should call shipRefine successfully', function(done) {
          // TODO: uncomment, update parameter values for shipRefine call and complete the assertions
          /*
          var opts = {};

          instance.shipRefine(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('transferCargo', function() {
        it('should call transferCargo successfully', function(done) {
          // TODO: uncomment, update parameter values for transferCargo call and complete the assertions
          /*
          var opts = {};

          instance.transferCargo(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('warpShip', function() {
        it('should call warpShip successfully', function(done) {
          // TODO: uncomment, update parameter values for warpShip call and complete the assertions
          /*
          var opts = {};

          instance.warpShip(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
